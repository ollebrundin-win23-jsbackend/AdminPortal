@inject HttpClient HttpClient
@inject IConfiguration Configuration

@page "/Courses"
@using System.Text.Json
@using AdminPortal.Models
@using Microsoft.AspNetCore.Authorization
@using Newtonsoft.Json
@using System.Net.Http.Headers
@attribute [Authorize]

<PageTitle>Courses</PageTitle>

<section class="courses">
    <h1>Administer Courses</h1>
    <div class="courses-container">
        @if (CourseList != null)
        {
            foreach (var course in CourseList)
            {
                <div class="course-box">
                    <p>@course.Title <span>by @course.Author</span></p>
                    <a href="/SingleCourse/@course.Id">Edit</a>
                </div>
            }
        }
    </div>
</section>

@code {
    private IEnumerable<SmallCourseModel>? CourseList { get; set; } = new List<SmallCourseModel>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var tokenResult = await HttpClient.GetAsync(Configuration.GetValue<string>("TokenProviderUrl")); //Vi gör en GET request till vår TokenProvider för att hämta vår token.
            var token = await tokenResult.Content.ReadAsStringAsync(); //Vår token lagras som en sträng.
            HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);//Och sätts sedan som en authorization header i vår HttpClient.

            //HttpContent i form av StringContent skapas, som innehåller vår query med alla properties vi vill hämta. Den postas även som en application/json för att det ska hanteras på rätt sätt (om man bara postar som en vanlig sträng får man 404 not found)
            var query = new StringContent("{\"query\":\"query{getAllCourses{id title author} }\"}", System.Text.Encoding.UTF8, "application/json");

            var response = await HttpClient.PostAsync(Configuration.GetValue<string>("GraphQLUrl"), query); //Vi gör en POST request till vårt GraphQL API
            if (response.IsSuccessStatusCode)
            {
                //I verkliga scenarion bör man kanske kolla så att resultatet nedan inte innehåller något errors objekt, men nu skippar jag det
                var result = await response.Content.ReadFromJsonAsync<JsonElement>(); //Innehållet i responsen läses ut från en Json sträng till ett JsonElement, som tillåter oss att köra GetProperty nedan
                var courseListJson = result.GetProperty("data").GetProperty("getAllCourses").ToString(); //Här kan vi alltså hämta properties från Json objektet vilket är smidigt i detta fallet, då vi får tillbaka ett "data" objekt som innehåller ett "getAllCourses" objekt, som i sin tur innehåller själva objektet vi faktiskt vill hämta ut.
                CourseList = JsonConvert.DeserializeObject<IEnumerable<SmallCourseModel>>(courseListJson); //Slutligen gör vi om strängen (eftersom vi körde ToString) till vår CourseCard model.
            }
        }
        catch { }
    }
}

